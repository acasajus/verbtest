// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: dialogmgr/dialogmgr.proto

/*
Package dialogmgr is a generated protocol buffer package.

It is generated from these files:
	dialogmgr/dialogmgr.proto

It has these top-level messages:
	MessageRequest
	MessageResponse
*/
package dialogmgr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for DialogMgr service

type DialogMgrService interface {
	Message(ctx context.Context, in *MessageRequest, opts ...client.CallOption) (*MessageResponse, error)
}

type dialogMgrService struct {
	c    client.Client
	name string
}

func NewDialogMgrService(name string, c client.Client) DialogMgrService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "dialogmgr"
	}
	return &dialogMgrService{
		c:    c,
		name: name,
	}
}

func (c *dialogMgrService) Message(ctx context.Context, in *MessageRequest, opts ...client.CallOption) (*MessageResponse, error) {
	req := c.c.NewRequest(c.name, "DialogMgr.Message", in)
	out := new(MessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DialogMgr service

type DialogMgrHandler interface {
	Message(context.Context, *MessageRequest, *MessageResponse) error
}

func RegisterDialogMgrHandler(s server.Server, hdlr DialogMgrHandler, opts ...server.HandlerOption) error {
	type dialogMgr interface {
		Message(ctx context.Context, in *MessageRequest, out *MessageResponse) error
	}
	type DialogMgr struct {
		dialogMgr
	}
	h := &dialogMgrHandler{hdlr}
	return s.Handle(s.NewHandler(&DialogMgr{h}, opts...))
}

type dialogMgrHandler struct {
	DialogMgrHandler
}

func (h *dialogMgrHandler) Message(ctx context.Context, in *MessageRequest, out *MessageResponse) error {
	return h.DialogMgrHandler.Message(ctx, in, out)
}
